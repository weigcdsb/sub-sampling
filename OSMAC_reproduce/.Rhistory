Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
r0 <- 200
r <- c(100, 200, 300, 500, 700, 1000)
#### unweighted mMSE
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- glm(pilot.y ~ pilot.X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 100
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
##### functions
adapt.lasso <- function(X, y){
ridge1_cv <- cv.glmnet(x = X, y = y, intercept = F,
family = 'binomial',
type.measure = "mse",
nfold = 10, alpha = 0)
best_ridge_coef <- as.numeric(coef(ridge1_cv, s = ridge1_cv$lambda.min))[-1]
alasso1_cv <- cv.glmnet(x = X, y = y, intercept = F,
family = 'binomial',
type.measure = "mse",
nfold = 10,
alpha = 1,
penalty.factor = 1 / abs(best_ridge_coef),
keep = TRUE)
return(coef(alasso1_cv, s = alasso1_cv$lambda.min)[-1])
}
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
pilot.beta
pilot.eta <- X %*% pilot.beta
pilot.prob <- exp(pilot.eta)/(1 + exp(pilot.eta))
pilot.prob.sub <- pilot.prob[pilot.idx]
pilot.W <- solve(t(pilot.X)%*% (pilot.X* pilot.prob.sub*(1-pilot.prob.sub)))
mMSE.ssp <- abs(y - pilot.prob)*sqrt(apply((X %*% pilot.W)^2, 1, sum))
mMSE.ssp <- mMSE.ssp/sum(mMSE.ssp)
mMSE.ssp
i <- 1
mMSE.ssp <- abs(y - pilot.prob)*sqrt(apply((X %*% pilot.W)^2, 1, sum))
mMSE.ssp <- mMSE.ssp/sum(mMSE.ssp)
mMSE.idx <- sample(1:n, r[i], replace = T, prob = mMSE.ssp)
mMSE.y <- y[mMSE.idx]
mMSE.X <- X[mMSE.idx, ]
mMSE.beta <- adapt.lasso(mMSE.X, mMSE.y)
mMSE.beta + pilot.beta
r0 <- 200
r <- c(100, 200, 300, 500, 700, 1000)
S <- 1000
## GLM not converge
#### adaptive LASSO
# mMSE
mMSE.mse <- rep(NA, length(r))
for(i in 1:length(r)){
mMSE.beta.boot <- matrix(NA, nrow = S, ncol = nBeta)
for(j in 1:S){
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
pilot.eta <- X %*% pilot.beta
pilot.prob <- exp(pilot.eta)/(1 + exp(pilot.eta))
pilot.prob.sub <- pilot.prob[pilot.idx]
pilot.W <- solve(t(pilot.X)%*% (pilot.X* pilot.prob.sub*(1-pilot.prob.sub)))
mMSE.ssp <- abs(y - pilot.prob)*sqrt(apply((X %*% pilot.W)^2, 1, sum))
mMSE.ssp <- mMSE.ssp/sum(mMSE.ssp)
mMSE.idx <- sample(1:n, r[i], replace = T, prob = mMSE.ssp)
mMSE.y <- y[mMSE.idx]
mMSE.X <- X[mMSE.idx, ]
mMSE.beta <- adapt.lasso(mMSE.X, mMSE.y)
mMSE.beta.boot[j, ] <- mMSE.beta + pilot.beta
}
mMSE.mse[i] <- mean(apply((mMSE.beta.boot -
matrix(rep(beta.mle, S),nrow = S, byrow = T))^2,
1, sum))
}
rep(beta, S)
#### data generation: mzNormal
set.seed(123)
n <- 10000
nBeta <- 100
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
#################################
##### functions
adapt.lasso <- function(X, y){
ridge1_cv <- cv.glmnet(x = X, y = y, intercept = F,
family = 'binomial',
type.measure = "mse",
nfold = 10, alpha = 0)
best_ridge_coef <- as.numeric(coef(ridge1_cv, s = ridge1_cv$lambda.1se))[-1]
alasso1_cv <- cv.glmnet(x = X, y = y, intercept = F,
family = 'binomial',
type.measure = "mse",
nfold = 10,
alpha = 1,
penalty.factor = 1 / abs(best_ridge_coef),
keep = TRUE)
return(coef(alasso1_cv, s = alasso1_cv$lambda.1se)[-1])
}
#################################
r0 <- 200
r <- c(100, 200, 300, 500, 700, 1000)
S <- 1000
#### GLM not converge
#### adaptive LASSO
# mMSE
mMSE.mse <- rep(NA, length(r))
for(i in 1:length(r)){
mMSE.beta.boot <- matrix(NA, nrow = S, ncol = nBeta)
for(j in 1:S){
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
pilot.eta <- X %*% pilot.beta
pilot.prob <- exp(pilot.eta)/(1 + exp(pilot.eta))
pilot.prob.sub <- pilot.prob[pilot.idx]
pilot.W <- solve(t(pilot.X)%*% (pilot.X* pilot.prob.sub*(1-pilot.prob.sub)))
mMSE.ssp <- abs(y - pilot.prob)*sqrt(apply((X %*% pilot.W)^2, 1, sum))
mMSE.ssp <- mMSE.ssp/sum(mMSE.ssp)
mMSE.idx <- sample(1:n, r[i], replace = T, prob = mMSE.ssp)
mMSE.y <- y[mMSE.idx]
mMSE.X <- X[mMSE.idx, ]
mMSE.beta <- adapt.lasso(mMSE.X, mMSE.y)
mMSE.beta.boot[j, ] <- mMSE.beta + pilot.beta
print(j)
}
mMSE.mse[i] <- mean(apply((mMSE.beta.boot -
matrix(rep(beta, S),nrow = S, byrow = T))^2,
1, sum))
}
library(glmnet)
library(MASS)
#################################
#### data generation: mzNormal
set.seed(123)
n <- 10000
nBeta <- 100
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
#################################
##### functions
adapt.lasso <- function(X, y){
ridge1_cv <- cv.glmnet(x = X, y = y, intercept = F,
family = 'binomial',
type.measure = "mse",
nfold = 10, alpha = 0)
best_ridge_coef <- as.numeric(coef(ridge1_cv, s = ridge1_cv$lambda.1se))[-1]
alasso1_cv <- cv.glmnet(x = X, y = y, intercept = F,
family = 'binomial',
type.measure = "mse",
nfold = 10,
alpha = 1,
penalty.factor = 1 / abs(best_ridge_coef),
keep = TRUE)
return(coef(alasso1_cv, s = alasso1_cv$lambda.1se)[-1])
}
#################################
r0 <- 200
r <- c(100, 200, 300, 500, 700, 1000)
S <- 1000
#### GLM not converge
#### adaptive LASSO
beta.adpLasso <- adapt.lasso(X, y)
full.beta.boot <- matrix(NA, nrow = S, ncol = nBeta)
i <- 1
tmp.idx <- sample(1:n, n, replace = T)
tmp.y <- y[tmp.idx]
tmp.X <- X[tmp.idx, ]
beta.adpLasso
full.beta.boot
mean(apply((full.beta.boot -
matrix(rep(beta, S),nrow = S, byrow = T))^2,
1, sum))
set.seed(123)
n <- 10000
nBeta <- 50
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 50
beta <- rep(0, nBeta)
beta[1:10] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 60
beta <- rep(0, nBeta)
beta[1:10] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 70
beta <- rep(0, nBeta)
beta[1:10] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 70
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 80
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 100
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 100
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
glm(pilot.y ~ pilot.X - 1,
family = binomial(link = 'logit'))$coefficients
#### data generation: mzNormal
set.seed(123)
n <- 10000
nBeta <- 50
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
glm(pilot.y ~ pilot.X - 1,
family = binomial(link = 'logit'))$coefficients
beta.mle <- glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
#### data generation: mzNormal
set.seed(123)
n <- 10000
nBeta <- 50
beta <- rep(0, nBeta)
beta[1:10] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
glm(pilot.y ~ pilot.X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 50
beta <- rep(0, nBeta)
beta[1:25] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
glm(pilot.y ~ pilot.X - 1,
family = binomial(link = 'logit'))$coefficients
beta.mle <- glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
set.seed(123)
n <- 10000
nBeta <- 50
beta <- rep(0, nBeta)
beta[1:20] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
glm(pilot.y ~ pilot.X - 1,
family = binomial(link = 'logit'))$coefficients
beta.mle <- glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
beta.mle
beta.adpLasso <- adapt.lasso(X, y)
set.seed(123)
n <- 10000
nBeta <- 40
beta <- rep(0, nBeta)
beta[1:10] <- 0.5
Sigma <- matrix(0.5, nrow = nBeta, ncol = nBeta)
diag(Sigma) <- 1
mu <- rep(0, nBeta)
X <- mvrnorm(n, mu, Sigma)
eta <- X %*% beta
p <- exp(eta)/(1 + exp(eta))
y <- rbinom(n, 1, prob = p)
beta.mle <- glm(y ~ X - 1,
family = binomial(link = 'logit'))$coefficients
n1 <- sum(y)
n0 <- n - n1
pilot.ssp <- rep(1/(2*n0), n)
pilot.ssp[y==1] <- 1/(2*n1)
pilot.idx <- sample(1:n, r0, replace = T, prob = pilot.ssp)
pilot.y <- y[pilot.idx]
pilot.X <- X[pilot.idx, ]
pilot.beta <- adapt.lasso(pilot.X, pilot.y)
glm(pilot.y ~ pilot.X - 1,
family = binomial(link = 'logit'))$coefficients
adapt.lasso <- function(X, y){
ridge1_cv <- cv.glmnet(x = X, y = y, intercept = F,
family = 'binomial',
type.measure = "mse",
nfold = 10, alpha = 0)
best_ridge_coef <- as.numeric(coef(ridge1_cv, s = ridge1_cv$lambda.1se))[-1]
alasso1_cv <- cv.glmnet(x = X, y = y, intercept = F,
family = 'binomial',
type.measure = "mse",
nfold = 10,
alpha = 1,
penalty.factor = 1 / abs(best_ridge_coef),
keep = TRUE)
return(coef(alasso1_cv, s = alasso1_cv$lambda.1se)[-1])
}
#################################
r0 <- 200
r <- c(100, 200, 300, 500, 700, 1000)
S <- 1000
#### GLM not converge for small subsamples
#### adaptive LASSO
beta.adpLasso <- adapt.lasso(X, y)
beta.adpLasso
beta.mle
png('D:\\GitHub\\sub-sampling\\OSMAC_reproduce\\plot.png',
width = 600,height = 600, res = 100)
plot(r, unif.mse, type = 'b', ylim = c(0, 1),
col = 1, pch = "1", lwd = 2,
main = 'mzNormal', ylab = 'MSE')
lines(r, mMSE.mse, type = 'b', col = 2, pch = "2", lwd = 2)
lines(r, mVC.mse, type = 'b', col = 3, pch = "3", lwd = 2)
lines(r, LCC.mse, type = 'b', col = 4, pch = "4", lwd = 2)
abline(h = full.mse, lty = 2, lwd = 2, col = 1)
legend('topright', lwd = 2,
lty = c(rep(1, 4), 2), col = c(1:4, 1),
pch = c(as.character(1:4), NA),
legend = c('uniform', 'mMSE', 'mVc', 'LCC', 'full'))
dev.off()
